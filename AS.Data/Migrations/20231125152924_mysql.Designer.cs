// <auto-generated />
using System;
using AS.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AS.Data.Migrations
{
    [DbContext(typeof(EfDbContext))]
    [Migration("20231125152924_mysql")]
    partial class mysql
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("AS.Entities.Entity.ActionStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("ActionStatus", "AS");
                });

            modelBuilder.Entity("AS.Entities.Entity.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("FacultyId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(512)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UpdatedById")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("FacultyId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Department", "AS");
                });

            modelBuilder.Entity("AS.Entities.Entity.Faculty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<byte>("EducationTime")
                        .HasMaxLength(2)
                        .HasColumnType("tinyint unsigned");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(512)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UpdatedById")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Faculty", "AS");
                });

            modelBuilder.Entity("AS.Entities.Entity.Language", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("De")
                        .HasColumnType("longtext");

                    b.Property<string>("En")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Es")
                        .HasColumnType("longtext");

                    b.Property<string>("Fr")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Keyword")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Tr")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UpdatedById")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Language", "AS");
                });

            modelBuilder.Entity("AS.Entities.Entity.Menu", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(512)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("varchar(512)");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("MenuUrl")
                        .IsRequired()
                        .HasColumnType("varchar(512)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(512)");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UpdatedById")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ParentId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Menus", "AS");
                });

            modelBuilder.Entity("AS.Entities.Entity.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("ActionName")
                        .IsRequired()
                        .HasColumnType("varchar(512)");

                    b.Property<int?>("ActionStatusId")
                        .HasColumnType("int");

                    b.Property<int>("CRUDActionType")
                        .HasColumnType("int");

                    b.Property<string>("ControllerName")
                        .IsRequired()
                        .HasColumnType("varchar(512)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(512)");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(512)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UpdatedById")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("ActionStatusId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Permissions", "AS");
                });

            modelBuilder.Entity("AS.Entities.Entity.PermissionMenuLine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("MenuId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UpdatedById")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("MenuId");

                    b.HasIndex("PermissionId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("PermissionMenuLines", "AS");
                });

            modelBuilder.Entity("AS.Entities.Entity.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("DepartmentId")
                        .IsRequired()
                        .HasColumnType("char(36)");

                    b.Property<int?>("IdentityNo")
                        .HasMaxLength(11)
                        .HasColumnType("int");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("varchar(250)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UpdatedById")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("UpdatedById");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Person", "AS");
                });

            modelBuilder.Entity("AS.Entities.Entity.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(512)");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(512)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UpdatedById")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Roles", "AS");
                });

            modelBuilder.Entity("AS.Entities.Entity.RolePermissionLine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UpdatedById")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("RolePermissionLines", "AS");
                });

            modelBuilder.Entity("AS.Entities.Entity.RoleUserLine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UpdatedById")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("RoleId");

                    b.HasIndex("UpdatedById");

                    b.HasIndex("UserId");

                    b.ToTable("RoleUserLines", "AS");
                });

            modelBuilder.Entity("AS.Entities.Entity.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("char(36)");

                    b.Property<string>("FatherName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("varchar(1)");

                    b.Property<int>("IdentityNo")
                        .HasMaxLength(11)
                        .HasColumnType("int");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("MotherName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(512)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PlaceOfBirth")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("varchar(512)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UpdatedById")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("UpdatedById");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Student", "AS");
                });

            modelBuilder.Entity("AS.Entities.Entity.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(512)");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("char(128)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UpdatedById")
                        .HasColumnType("char(36)");

                    b.Property<int>("UserType")
                        .HasMaxLength(1)
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("varchar(512)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("UK_UserEmail");

                    b.HasIndex("UpdatedById");

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasDatabaseName("UK_UserUsername");

                    b.ToTable("Users", "AS");
                });

            modelBuilder.Entity("AS.Entities.Entity.Department", b =>
                {
                    b.HasOne("AS.Entities.Entity.User", "CreatedBy")
                        .WithMany("DepartmentsCreatedBy")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AS.Entities.Entity.Faculty", "Faculty")
                        .WithMany("DepartmentList")
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AS.Entities.Entity.User", "UpdatedBy")
                        .WithMany("DepartmentsUpdatedBy")
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Faculty");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("AS.Entities.Entity.Faculty", b =>
                {
                    b.HasOne("AS.Entities.Entity.User", "CreatedBy")
                        .WithMany("FacultiesCreatedBy")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AS.Entities.Entity.User", "UpdatedBy")
                        .WithMany("FacultiesUpdatedBy")
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("AS.Entities.Entity.Language", b =>
                {
                    b.HasOne("AS.Entities.Entity.User", "CreatedBy")
                        .WithMany("LanguageCreatedBy")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AS.Entities.Entity.User", "UpdatedBy")
                        .WithMany("LanguageUpdatedBy")
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("AS.Entities.Entity.Menu", b =>
                {
                    b.HasOne("AS.Entities.Entity.User", "CreatedBy")
                        .WithMany("MenusCreatedBy")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AS.Entities.Entity.Menu", "Parent")
                        .WithMany("ChildMenus")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AS.Entities.Entity.User", "UpdatedBy")
                        .WithMany("MenusUpdatedBy")
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Parent");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("AS.Entities.Entity.Permission", b =>
                {
                    b.HasOne("AS.Entities.Entity.ActionStatus", null)
                        .WithMany("PermissionLines")
                        .HasForeignKey("ActionStatusId");

                    b.HasOne("AS.Entities.Entity.User", "CreatedBy")
                        .WithMany("PermissionsCreatedBy")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AS.Entities.Entity.User", "UpdatedBy")
                        .WithMany("PermissionsUpdatedBy")
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("AS.Entities.Entity.PermissionMenuLine", b =>
                {
                    b.HasOne("AS.Entities.Entity.User", "CreatedBy")
                        .WithMany("PermissionMenuLinesCreatedBy")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AS.Entities.Entity.Menu", "Menu")
                        .WithMany("PermissionMenuLines")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AS.Entities.Entity.Permission", "Permission")
                        .WithMany("PermissionMenuLines")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AS.Entities.Entity.User", "UpdatedBy")
                        .WithMany("PermissionMenuLinesUpdatedBy")
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Menu");

                    b.Navigation("Permission");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("AS.Entities.Entity.Person", b =>
                {
                    b.HasOne("AS.Entities.Entity.User", "CreatedBy")
                        .WithMany("PersonsCreatedBy")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AS.Entities.Entity.Department", "Department")
                        .WithMany("PersonList")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AS.Entities.Entity.User", "UpdatedBy")
                        .WithMany("PersonsUpdatedBy")
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AS.Entities.Entity.User", "User")
                        .WithOne("Person")
                        .HasForeignKey("AS.Entities.Entity.Person", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Department");

                    b.Navigation("UpdatedBy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AS.Entities.Entity.Role", b =>
                {
                    b.HasOne("AS.Entities.Entity.User", "CreatedBy")
                        .WithMany("RolesCreatedBy")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AS.Entities.Entity.User", "UpdatedBy")
                        .WithMany("RolesUpdatedBy")
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("AS.Entities.Entity.RolePermissionLine", b =>
                {
                    b.HasOne("AS.Entities.Entity.User", "CreatedBy")
                        .WithMany("RolePermissionLinesCreatedBy")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AS.Entities.Entity.Permission", "Permission")
                        .WithMany("RolePermissionLines")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AS.Entities.Entity.Role", "Role")
                        .WithMany("RolePermissionLines")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AS.Entities.Entity.User", "UpdatedBy")
                        .WithMany("RolePermissionLinesUpdatedBy")
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Permission");

                    b.Navigation("Role");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("AS.Entities.Entity.RoleUserLine", b =>
                {
                    b.HasOne("AS.Entities.Entity.User", "CreatedBy")
                        .WithMany("RoleUserLinesCreatedBy")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AS.Entities.Entity.Role", "Role")
                        .WithMany("RoleUserLines")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AS.Entities.Entity.User", "UpdatedBy")
                        .WithMany("RoleUserLinesUpdatedBy")
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AS.Entities.Entity.User", "User")
                        .WithMany("RoleUserLines")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Role");

                    b.Navigation("UpdatedBy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AS.Entities.Entity.Student", b =>
                {
                    b.HasOne("AS.Entities.Entity.User", "CreatedBy")
                        .WithMany("StudentsCreatedBy")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AS.Entities.Entity.Department", "Department")
                        .WithMany("StudentList")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AS.Entities.Entity.User", "UpdatedBy")
                        .WithMany("StudentsUpdatedBy")
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AS.Entities.Entity.User", "User")
                        .WithOne("Student")
                        .HasForeignKey("AS.Entities.Entity.Student", "UserId");

                    b.Navigation("CreatedBy");

                    b.Navigation("Department");

                    b.Navigation("UpdatedBy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AS.Entities.Entity.User", b =>
                {
                    b.HasOne("AS.Entities.Entity.User", "CreatedBy")
                        .WithMany("UsersCreatedBy")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AS.Entities.Entity.User", "UpdatedBy")
                        .WithMany("UsersUpdatedBy")
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("AS.Entities.Entity.ActionStatus", b =>
                {
                    b.Navigation("PermissionLines");
                });

            modelBuilder.Entity("AS.Entities.Entity.Department", b =>
                {
                    b.Navigation("PersonList");

                    b.Navigation("StudentList");
                });

            modelBuilder.Entity("AS.Entities.Entity.Faculty", b =>
                {
                    b.Navigation("DepartmentList");
                });

            modelBuilder.Entity("AS.Entities.Entity.Menu", b =>
                {
                    b.Navigation("ChildMenus");

                    b.Navigation("PermissionMenuLines");
                });

            modelBuilder.Entity("AS.Entities.Entity.Permission", b =>
                {
                    b.Navigation("PermissionMenuLines");

                    b.Navigation("RolePermissionLines");
                });

            modelBuilder.Entity("AS.Entities.Entity.Role", b =>
                {
                    b.Navigation("RolePermissionLines");

                    b.Navigation("RoleUserLines");
                });

            modelBuilder.Entity("AS.Entities.Entity.User", b =>
                {
                    b.Navigation("DepartmentsCreatedBy");

                    b.Navigation("DepartmentsUpdatedBy");

                    b.Navigation("FacultiesCreatedBy");

                    b.Navigation("FacultiesUpdatedBy");

                    b.Navigation("LanguageCreatedBy");

                    b.Navigation("LanguageUpdatedBy");

                    b.Navigation("MenusCreatedBy");

                    b.Navigation("MenusUpdatedBy");

                    b.Navigation("PermissionMenuLinesCreatedBy");

                    b.Navigation("PermissionMenuLinesUpdatedBy");

                    b.Navigation("PermissionsCreatedBy");

                    b.Navigation("PermissionsUpdatedBy");

                    b.Navigation("Person");

                    b.Navigation("PersonsCreatedBy");

                    b.Navigation("PersonsUpdatedBy");

                    b.Navigation("RolePermissionLinesCreatedBy");

                    b.Navigation("RolePermissionLinesUpdatedBy");

                    b.Navigation("RoleUserLines");

                    b.Navigation("RoleUserLinesCreatedBy");

                    b.Navigation("RoleUserLinesUpdatedBy");

                    b.Navigation("RolesCreatedBy");

                    b.Navigation("RolesUpdatedBy");

                    b.Navigation("Student");

                    b.Navigation("StudentsCreatedBy");

                    b.Navigation("StudentsUpdatedBy");

                    b.Navigation("UsersCreatedBy");

                    b.Navigation("UsersUpdatedBy");
                });
#pragma warning restore 612, 618
        }
    }
}
